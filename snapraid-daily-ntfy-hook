#!/usr/bin/env bash

###################################################
# SnapRAID-Daily NTFY Notification Hook
###################################################
# COPYRIGHT (C) Mark Finnan 2025
###################################################

script_version="0.1.3"

# Script Arguments
# $1 - Email Subject
# $2 - File Containing the Body
# $3 - Attachment (if error was encountered)

# Script Variables
wait_between_notifications=5

###################################################
# Functions
###################################################

# Main Function
main() {
  # Check Requirements
  check_for_requirements "${1}" "${2}" "${3}"

  # Send Notification
  send_ntfy_notification "${1}" "${2}" "${3}"
}

# Requirements Check
check_for_requirements() {

  # Check Curl is installed
  if [ -z $(which curl) ]; then
    echo "ERROR: curl is not installed/found in PATH - Exiting"
    exit 1

  # Check for jq
  elif [ -z $(which jq) ]; then
    echo "ERROR: jq is not installed/found in PATH - Exiting"
    exit 1

  # Check for ntfy url
  elif [ -z "${ntfy_url}" ]; then
    echo "ERROR: No ntfy_url defined - Require export ntfy_url=\"https://ntfy.sh/channel_name\" in snapraid-daily.conf - Exiting"
    exit 1

  # Check for Notification Title
  elif [ -z "${1}" ]; then
    echo "ERROR: No Email Subject (Notification Title) Specified - Exiting"
    exit 1

  # Check for Notification Body
  elif [ -z "${2}" ]; then
    echo "ERROR: No Email Body (Notfication Body) Specified - Exiting"
    exit 1
  fi
}

# Send the notification(s)
send_ntfy_notification() {

  # Local Variables
  local email_title="${1}"
  local email_body="${2}"
  local email_attachment="${3}"

  # Figure Out Number of Notifications
  N_ntfy=1
  i=1

  # If Run Log is Enabled 
  if [ ! -z "${ntfy_attach_run_log}" ] && [ "${ntfy_attach_run_log}" == "yes" ]
  then
    N_ntfy=$((N_ntfy+1))
  fi

  # Check for Attachment
  if [ ! -z "${email_attachment}" ]
  then
    N_ntfy=$((N_ntfy+1))
  fi

  # Get the Notification Icon (Tag) - Presence of an Email Attachment indicates the script
  # ended in error. See here: https://docs.ntfy.sh/emojis/
  if [ -z "${email_attachment}" ]
  then
    notification_tag="white_check_mark"
  else
    notification_tag="warning"
  fi

  # Step 1 - Generate Notification Title and Body
  # Specify the Notification Title as the hostname & the notification body as the email subject
  system_hostname=$(hostname --fqdn) &> "/dev/null"
  notification_title="${system_hostname}"
  notification_body="${email_title}"

  # Step 2 - Check for Additional Information to add to the notification body
  # Check for a Thresholds Exceeded condition
  if [ "${email_title}" == "SnapRAID-DAILY: Threshold(s) Exceeded" ]
  then
    thresholds_info="$( sed -n '/Deleted/,/Updated Threshold/{p;/Updated Threshold/q};' "${email_body}" )"
    notification_body=$(echo -e "${notification_body}"'\n'"${thresholds_info}")
  fi

  # If the option to attach the main run log is enabled insert a note to the body
  if [ ! -z "${ntfy_attach_run_log}" ] && [ "${ntfy_attach_run_log}" == "yes" ]
  then
    notification_body=$(echo -e "${notification_body}"'\n'"Run log is attached...")
  fi

  # If an Email Attachment was generated by the main script, insert a note to the body
  if [ ! -z "${email_attachment}" ]
  then
    notification_body=$(echo -e "${notification_body}"'\n'"Command log file is attached...")
  fi

  # Step 3 - Send Main Notification
  echo "Sending $N_ntfy Notification(s) to  ${ntfy_url}"

  # Send Notification using Curl - Check if there is a message parameter in the json output as a measure of success
  ntfy_response1=$(curl --silent --retry 3 -H "Title: ${notification_title}" \
                                           -H "Tags: "${notification_tag}"" \
                                           -d "${notification_body}" \
                                           "${ntfy_url}" \
                                         | jq .message)

  # Test the response For Success
  if [ ! -z "${ntfy_response1}"  ]
  then
    echo "$i/$N_ntfy [Main]:        Reply from ${ntfy_url} : OK"
  else
    echo "$i/$N_ntfy [Main]:        Problem sending notification"
  fi
  i=$((i+1))

  # Wait a few seconds before sending the next notification
  sleep $wait_between_notifications

  # Step 4 - If the main runlog option is specifed - attach it here
  if [ ! -z "${ntfy_attach_run_log}" ] && [ "${ntfy_attach_run_log}" == "yes" ]
  then
    ntfy_response2=$(curl --silent --retry 3 -T "${email_body}" \
                                             -H "Filename: "${email_body}"" \
                                             "${ntfy_url}" \
                                           | jq .message)

    # Test the Response for Success
    if [ ! -z "${ntfy_response2}" ]
    then
      echo "$i/$N_ntfy [Run-Log]:     Reply from ${ntfy_url} : OK"
    else
      echo "$i/$N_ntfy [Run-Log]:     Problem sending notification"
    fi
    i=$((i+1))
  fi

  # Step 3 - Send Additional Notification if an Attachement is present. Same success check as above
  if [ ! -z "${email_attachment}" ]
  then
    # Wait a few seconds before sending the next notification
    sleep $wait_between_notifications

    # Send Notification attaching command log
    ntfy_response3=$(curl --silent --retry 3 -T "${email_attachment}" \
                                             -H "Filename: "${email_attachment}"" \
                                             "${ntfy_url}" \
                                           | jq .message)

    # Test the Response for Success
    if [ ! -z "${ntfy_response3}" ]
    then
      echo "$i/$N_ntfy [Command-Log]: Reply from ${ntfy_url} : OK"
    else
      echo "$i/$N_ntfy [Command-Log]: Problem sending notification"
    fi
  fi
}

###################################################
# Call Main Function
###################################################
main "$@"

